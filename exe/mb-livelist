#! /usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'pp'
require 'csv'
require 'fileutils'
require 'metabobank_tools/mb-method'

#
# 生命情報・DDBJ センター
# 2022-06-07 児玉
# MetaboBank study livelist 生成 内部用と公開用
#
# 変更履歴
# 2023-01-10 児玉 統計報告目的もあり、内部用に bytes、ユニーク assay name 数、organism name, taxonomy ID を追加

## 仕様
# https://ddbj-dev.atlassian.net/wiki/spaces/metabobank/pages/2016837775/livelist+filelist#%E5%85%A8%E4%BD%93-livelist

today = Date.today.strftime('%Y-%m-%d')
study_list_file = open("./report/mb-livelist-#{today}.txt", "w")
study_livelist_file = open("./livelist.txt", "w")
study_list_log_file = open("./log/mb-livelist-#{today}-log.txt", "w")

## IDF がある MTBKS が対象。SDRF も取得
# MTBKS 番号整数でソートするため番号部分以外を削除し、整数化
idf_a = Dir.glob("study/MTBKS*/*.idf.txt").sort_by{|v| v.sub(/study\/MTBKS\d{1,}\/MTBKS/, "").sub(/\.idf\.txt/, "").to_i }
sdrf_a = Dir.glob("study/MTBKS*/*.sdrf.txt").sort_by{|v| v.sub(/study\/MTBKS\d{1,}\/MTBKS/, "").sub(/\.sdrf\.txt/, "").to_i }

# MTBKS 配下に idf、sdrf がない場合 log 出力
study_dir_a = Dir.glob("study/MTBKS*").collect{|v| v.sub(/study\//, "") }
idf_dir_a = Dir.glob("study/MTBKS*/*.idf.txt").select{|v| v =~ /MTBKS\d{1,}\.idf\.txt/}.sort
idf_study_dir_a = idf_dir_a.collect{|v| v.sub(/\/MTBKS\d{1,}(\.\d)?\.idf\.txt/, "").sub(/study\//, "") }

# IDF
study_without_idf_a = study_dir_a - idf_study_dir_a

idf_dir_a = Dir.glob("study/MTBKS*/*.idf.txt").select{|v| v =~ /MTBKS\d{1,}\.idf\.txt/}.sort
idf_study_dir_a = idf_a.collect{|v| v.sub(/\/MTBKS\d{1,}(\.\d)?\.idf\.txt/, "").sub(/study\//, "") }
study_without_idf_a = study_dir_a - idf_study_dir_a

# SDRF
sdrf_dir_a = Dir.glob("study/MTBKS*/*.sdrf.txt").select{|v| v =~ /MTBKS\d{1,}\.sdrf\.txt/}.sort
sdrf_study_dir_a = sdrf_a.collect{|v| v.sub(/\/MTBKS\d{1,}(\.\d)?\.sdrf\.txt/, "").sub(/study\//, "") }
study_without_sdrf_a = study_dir_a - sdrf_study_dir_a

# IDF が無い study
if study_without_idf_a.size > 0
  message = "Warning: Study without IDF: #{study_without_idf_a.sort.uniq.join(",")}"
  puts message
  study_list_log_file.puts message
end

# SDRF が無い study
if study_without_sdrf_a.size > 0
  message = "Warning: Study without SDRF: #{study_without_sdrf_a.sort.uniq.join(",")}"
  puts message
  study_list_log_file.puts message
end

# IDF が複数ある study
if idf_study_dir_a.select{|e| idf_study_dir_a.count(e) > 1 }.uniq.size > 0
  message = "Warning: Study with more than one IDF: #{idf_study_dir_a.select{|e| idf_study_dir_a.count(e) > 1 }.uniq.join(",")}"
  puts message
  study_list_log_file.puts message
end

# SDRF が複数ある study
if sdrf_study_dir_a.select{|e| sdrf_study_dir_a.count(e) > 1 }.uniq.size > 0
  message = "Warning: Study with more than one SDRF: #{sdrf_study_dir_a.select{|e| sdrf_study_dir_a.count(e) > 1 }.uniq.join(",")}"
  puts message
  study_list_log_file.puts message
end

###
### IDF パース
###
idf_a = []
idf_list_h = {}
for idf in idf_dir_a

  idf_h = {}
  idf_a = []

  mtbks_idf, idf_h, idf_a, idf_group_h, raw_idf_a, warning_idf_parse = idf_parse(idf)

  puts warning unless warning_idf_parse.empty?

  # IDF 全部を格納
  idf_list_h.store(mtbks_idf, idf_h)

  # IDF とディレクトリ中のアクセッション番号の一致チェック
  mtbks_idf_filename = ""
  if idf =~ /(MTBKS\d{1,})\.idf\.txt/
    mtbks_idf_filename = $1
  end

  mtbks_dir = ""
  if idf =~ /\/(MTBKS\d{1,})\//
    mtbks_dir = $1
  end

  unless (mtbks_idf == mtbks_idf_filename) && (mtbks_idf == mtbks_dir)
    message = "Warning: MTBKS accessions are different: IDF-#{mtbks_idf}, IDF filename-#{mtbks_idf_filename}, directory-#{mtbks_dir}"
    puts message
    study_list_log_file.puts message
  end

end

###
### SDRF パース
###
sdrf_list_h = {}
sdrf_list_transpose_h = {}
biosamples_h = {}
biosample_a = []
for sdrf in sdrf_dir_a

  biosample_a = []
  biosample_range = ""

  mtbks_sdrf, sdrf_a, sdrf_transpose_h, sdrf_bs_h, warning_sdrf_parse = sdrf_parse(sdrf)
  sdrf_list_transpose_h.store(mtbks_sdrf, sdrf_transpose_h)
  sdrf_bs_h.each{|key, value| biosample_a.push(key)}
  biosample_range = range_extraction(biosample_a.sort, "SAMD", 8)
  biosamples_h.store(mtbks_sdrf, [sdrf_bs_h.size, biosample_range]) if sdrf_bs_h.size > 0

end

## status file チェック
# status-suppressed.txt  status-cancelled.txt  status-reviewer-access.txt  status-killed.txt
# https://ddbj-dev.atlassian.net/wiki/spaces/metabobank/pages/2135523378
cancelled_h = {}
temporarily_suppressed_h = {}
permanently_suppressed_h = {}
reviewer_access_h = {}
killed_h = {}
for status_file in status_files_a = Dir.glob("study/MTBKS*/status-*.txt")

  s = File::Stat.new(status_file)
  filename = File.basename(status_file)

  # 最終更新日は IDF ではなく status file timestamp から取得
  mtime = s.mtime.strftime("%Y-%m-%d")

  mtbks_dir = ""
  if status_file =~ /\/(MTBKS\d{1,})\//
    mtbks_dir = $1
  end

  case filename

  when "status-cancelled.txt" then cancelled_h.store(mtbks_dir, mtime)
  when "status-temporarily-suppressed.txt" then temporarily_suppressed_h.store(mtbks_dir, mtime)
  when "status-permanently-suppressed.txt" then permanently_suppressed_h.store(mtbks_dir, mtime)
  when "status-reviewer-access.txt" then reviewer_access_h.store(mtbks_dir, mtime)
  when "status-killed.txt" then killed_h.store(mtbks_dir, mtime)

  end

end


## ファイルサイズ
raw_size_h = {}
raw_a = Dir.glob("study/MTBKS*/raw")
for raw in raw_a

  mtbks_dir = ""
  if raw =~ /\/(MTBKS\d{1,})\//
    mtbks_dir = $1
  end

  total_size = `du -sb #{raw}`.split("\t")[0].to_i
  raw_size_h.store(mtbks_dir, total_size)

end

processed_size_h = {}
processed_a = Dir.glob("study/MTBKS*/processed")
for processed in processed_a

  mtbks_dir = ""
  if processed =~ /\/(MTBKS\d{1,})\//
    mtbks_dir = $1
  end

  total_size = `du -sb #{processed}`.split("\t")[0].to_i
  processed_size_h.store(mtbks_dir, total_size)

end


## livelist 作成
study_list_file.puts ["Study accession", "Status", "Reviewer access", "BioProject", "BioSample", "Organism", "Taxonomy ID", "Submitted", "Published", "Updated", "Submission type", "Study title", "BioSamples", "Assays", "Raw data files", "Processed data files", "MAFs", "Raw file size", "Raw file size (bytes)", "Processed file size", "Processed file size (bytes)"].join("\t")
study_livelist_file.puts ["Accession", "Status", "Updated", "Published", "Submitted"].join("\t")
for mtbks, idf_h in idf_list_h

  public_release_date = ""
  submission_date = ""
  last_update_date = ""
  status = ""
  reviewer_access = ""

  public_release_date = idf_h["Public Release Date"][0] if idf_h["Public Release Date"][0]
  submission_date = idf_h["Comment[Submission Date]"][0] if idf_h["Comment[Submission Date]"][0]
  last_update_date = idf_h["Comment[Last Update Date]"][0] if idf_h["Comment[Last Update Date]"][0]

  # 日付形式チェック
  if !public_release_date.empty? && public_release_date !~ /20\d{2}-\d{2}-\d{2}/
    message = "Warning: Invalid Public Release Date format: #{mtbks} #{public_release_date}"
    puts message
    study_list_log_file.puts message
  end

  if !submission_date.empty? && submission_date !~ /20\d{2}-\d{2}-\d{2}/
    message = "Warning: Invalid Submission Date format: #{mtbks} #{submission_date}"
    puts message
    study_list_log_file.puts message
  end

  if !last_update_date.empty? && last_update_date !~ /20\d{2}-\d{2}-\d{2}/
    message = "Warning: Invalid Last Update Date format: #{mtbks} #{last_update_date}"
    puts message
    study_list_log_file.puts message
  end

  # status 取得
  status = "Cancelled" if cancelled_h.has_key?(mtbks)
  status = "Temporarily suppressed" if temporarily_suppressed_h.has_key?(mtbks)
  status = "Permanently suppressed" if permanently_suppressed_h.has_key?(mtbks)
  status = "Killed" if killed_h.has_key?(mtbks)

  reviewer_access = "In review" if reviewer_access_h.has_key?(mtbks)

  # private or public
  if status == ""
    if public_release_date.empty?
      status = "Private"
    else
      status = "Public"
    end
  end

  bioproject = ""
  bioproject = idf_h["Comment[BioProject]"][0] if idf_h["Comment[BioProject]"] && idf_h["Comment[BioProject]"][0] && idf_h["Comment[BioProject]"][0] =~ /^PRJDB\d{1,}$/

  ## 統計
  # サンプル数
  sample_number = ""
  sample_number = biosamples_h[mtbks][0] if biosamples_h[mtbks] && biosamples_h[mtbks][0]

  biosample_range = ""
  biosample_range = biosamples_h[mtbks][1] if biosamples_h[mtbks] && biosamples_h[mtbks][1]

  # ファイル数 SDRF から取得
  raw_data_file_number = ""
  if sdrf_list_transpose_h[mtbks] && sdrf_list_transpose_h[mtbks]["Raw Data File"]
    raw_data_file_number = sdrf_list_transpose_h[mtbks]["Raw Data File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size if sdrf_list_transpose_h[mtbks]["Raw Data File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size > 0
  end

  processed_data_file_number = ""
  if sdrf_list_transpose_h[mtbks] && sdrf_list_transpose_h[mtbks]["Processed Data File"]
    processed_data_file_number = sdrf_list_transpose_h[mtbks]["Processed Data File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size if sdrf_list_transpose_h[mtbks]["Processed Data File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size > 0
  end

  maf_number = ""
  if sdrf_list_transpose_h[mtbks] && sdrf_list_transpose_h[mtbks]["Metabolite Assignment File"]
    maf_number = sdrf_list_transpose_h[mtbks]["Metabolite Assignment File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size if sdrf_list_transpose_h[mtbks]["Metabolite Assignment File"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size > 0
  end

  # ファイルサイズ
  raw_size = ""
  raw_size_readable = ""
  if raw_size_h[mtbks]
    raw_size = raw_size_h[mtbks]
    raw_size_readable = readable_file_size(raw_size)
  end

  processed_size = ""
  processed_size_readable = ""
  if processed_size_h[mtbks]
    processed_size = processed_size_h[mtbks]
    processed_size_readable = readable_file_size(processed_size)
  end

  # assay 数
  assay_number = ""
  if sdrf_list_transpose_h[mtbks] && sdrf_list_transpose_h[mtbks]["Assay Name"]
    assay_number = sdrf_list_transpose_h[mtbks]["Assay Name"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size if sdrf_list_transpose_h[mtbks]["Assay Name"].flatten.reject{|v| v.empty? || v.nil?}.sort.uniq.size > 0
  end

  # organism name and taxonomy id pairs
  organism_name_tax_id_a = []
  organism_name_a = []
  tax_id_a = []
  if sdrf_list_transpose_h[mtbks] && sdrf_list_transpose_h[mtbks]["Characteristics[organism]"] && sdrf_list_transpose_h[mtbks]["Characteristics[taxonomy_id]"]
    sdrf_list_transpose_h[mtbks]["Characteristics[organism]"].size.times{|i|
      organism_name_tax_id_a.push([sdrf_list_transpose_h[mtbks]["Characteristics[organism]"][i], sdrf_list_transpose_h[mtbks]["Characteristics[taxonomy_id]"][i]]) if sdrf_list_transpose_h[mtbks]["Characteristics[organism]"][i] != "" && !sdrf_list_transpose_h[mtbks]["Characteristics[organism]"][i].nil? && sdrf_list_transpose_h[mtbks]["Characteristics[taxonomy_id]"][i] != "" && !sdrf_list_transpose_h[mtbks]["Characteristics[taxonomy_id]"][i].nil?
    }

    if organism_name_tax_id_a.sort.uniq.size > 0
      for organism, taxid in organism_name_tax_id_a.sort.uniq
        organism_name_a.push(organism)
        tax_id_a.push(taxid)
      end
    end

  end

  # organism names
  organism_names = ""
  organism_names = organism_name_a.join(",") if organism_name_a.size > 0

  taxonomy_ids = ""
  taxonomy_ids = tax_id_a.join(",") if tax_id_a.size > 0

  # 出力
  study_list_file.puts [mtbks, status, reviewer_access, bioproject, biosample_range, organism_names, taxonomy_ids, submission_date, public_release_date, last_update_date, idf_h["Comment[Submission type]"], idf_h["Study Title"], sample_number, assay_number, raw_data_file_number, processed_data_file_number, maf_number, raw_size_readable, raw_size, processed_size_readable, processed_size].join("\t")

  # 公開用は status を絞る。
  study_livelist_file.puts [mtbks, status, last_update_date, public_release_date, submission_date].join("\t") if ["Public", "Temporarily suppressed", "Permanently suppressed", "Killed"].include?(status)

end

# ログ記録
if File.exist?(study_list_file)
  study_list_log_file.puts "./report/mb-livelist-#{today}.txt generated."
else
  study_list_log_file.puts "./report/mb-livelist-#{today}.txt Not generated."
end

if File.exist?(study_livelist_file)
  study_list_log_file.puts "livelist.txt generated."
else
  study_list_log_file.puts "livelist.txt Not generated."
end

study_list_file.close
study_livelist_file.close
study_list_log_file.close
